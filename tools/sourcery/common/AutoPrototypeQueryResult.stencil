{% macro getTemplateParameter y inoutCount %}{% if y <= inoutCount %}W{% else %}R{% endif %}{{y}}: PComponent{% endmacro %}
{% macro getClosureParameter y inoutCount %}{% if y <= inoutCount %}inout W{% else %}R{% endif %}{{y}}{% endmacro %}
{% macro getComponentTemplateParameters x inoutCount %}<{% for y in 1...x %}{% call getTemplateParameter y inoutCount %}{% if not forloop.last %}, {% endif %}{% endfor %}>{% endmacro %}
{% macro getClosureParameters x inoutCount %}{% for y in 1...x %}{% call getClosureParameter y inoutCount %}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}

public struct PrototypeQueryResult: PPrototypeQueryResult {
    let chunks: [Chunk]
    
    init(chunks: [Chunk]) {
        self.chunks = chunks
    }

    {% for componentsCount in 1...10 %}
    {% for inoutComponentsCount in 0...componentsCount %}
    public func forEach{% call getComponentTemplateParameters componentsCount inoutComponentsCount %}(_ closure: ({% call getClosureParameters componentsCount inoutComponentsCount %}) -> Void) {
        for chunk in chunks {
            chunk.forEach(closure)
        }
    }
    public func forEach{% call getComponentTemplateParameters componentsCount inoutComponentsCount %}(_ closure: (Entity, {% call getClosureParameters componentsCount inoutComponentsCount %}) -> Void) {
        for chunk in chunks {
            chunk.forEach(closure)
        }
    }
    {% endfor %}
    {% endfor %}
}
